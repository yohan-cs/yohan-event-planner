package com.yohan.event_planner.exception;


/**
 * Exception thrown for email-related errors including validation failures and email sending failures.
 *
 * <p>
 * This exception covers two main categories of email errors:
 * </p>
 * <ul>
 *   <li><strong>Validation Errors</strong>: Duplicate emails, invalid format, length issues</li>
 *   <li><strong>Sending Failures</strong>: SMTP connectivity, authentication, delivery issues</li>
 * </ul>
 *
 * <p>
 * Implements {@link HasErrorCode} to associate an {@link ErrorCode} with the exception,
 * enabling consistent error reporting across all email-related operations.
 * </p>
 *
 * @see com.yohan.event_planner.service.EmailService
 * @see com.yohan.event_planner.exception.GlobalExceptionHandler
 * @author Event Planner Development Team
 * @version 2.0.0
 * @since 1.0.0
 */
public class EmailException extends RuntimeException implements HasErrorCode {

    private final ErrorCode errorCode;

    /**
     * Constructs a new {@code EmailException} with a specific {@link ErrorCode}
     * and the email string involved in the error.
     * <p>
     * This constructor uses the error code and email to generate an appropriate error message.
     * </p>
     *
     * @param errorCode the specific {@link ErrorCode} representing the email validation error
     * @param email     the email string related to the error condition (may be {@code null})
     * @throws NullPointerException if {@code errorCode} is {@code null}
     */
    public EmailException(ErrorCode errorCode, String email) {
        super(buildMessage(errorCode, email));
        if (errorCode == null) {
            throw new NullPointerException("errorCode cannot be null");
        }
        this.errorCode = errorCode;
    }

    /**
     * Constructs a new {@code EmailException} with a custom message and a specific {@link ErrorCode}.
     * <p>
     * This constructor allows providing a custom error message instead of using
     * the default message generated by the error code.
     * </p>
     *
     * @param message   the custom error message
     * @param errorCode the specific {@link ErrorCode} representing the email error
     * @throws NullPointerException if {@code errorCode} is {@code null}
     */
    public EmailException(String message, ErrorCode errorCode) {
        super(message);
        if (errorCode == null) {
            throw new NullPointerException("errorCode cannot be null");
        }
        this.errorCode = errorCode;
    }

    /**
     * Constructs a new {@code EmailException} for email sending failures.
     * <p>
     * This constructor is used when email sending operations fail due to SMTP
     * connectivity, authentication, or other delivery issues.
     * </p>
     *
     * @param message the detail message describing the email sending failure
     */
    public EmailException(String message) {
        super(message);
        this.errorCode = ErrorCode.EMAIL_SEND_FAILED;
    }

    /**
     * Constructs a new {@code EmailException} for email sending failures with a cause.
     * <p>
     * This constructor is used when email sending operations fail and we want to
     * preserve the underlying exception that caused the failure.
     * </p>
     *
     * @param message the detail message describing the email sending failure
     * @param cause   the underlying cause of the email sending failure
     */
    public EmailException(String message, Throwable cause) {
        super(message, cause);
        this.errorCode = ErrorCode.EMAIL_SEND_FAILED;
    }

    /**
     * Returns the {@link ErrorCode} associated with this email exception,
     * indicating the specific type of email validation failure.
     *
     * @return the error code for this exception
     */
    @Override
    public ErrorCode getErrorCode() {
        return errorCode;
    }

    /**
     * Builds a detailed error message based on the provided error code and email context.
     *
     * @param errorCode the {@link ErrorCode} describing the email error
     * @param email     the email string involved in the error condition, can be {@code null}
     * @return a human-readable message describing the email error
     */
    private static String buildMessage(ErrorCode errorCode, String email) {
        return switch (errorCode) {
            case DUPLICATE_EMAIL -> "The email '" + email + "' is already registered.";
            case INVALID_EMAIL_LENGTH -> "The email '" + email + "' does not meet the length requirements.";
            case INVALID_EMAIL_FORMAT -> "The email '" + email + "' has an invalid format.";
            case INVALID_EMAIL_DOMAIN -> "The email domain '" + email + "' is not allowed for registration.";
            case EMAIL_SEND_FAILED -> "Failed to send email" + (email != null ? " to '" + email + "'" : "");
            case EMAIL_NOT_VERIFIED -> "Email verification required. Please check your email and verify your account before logging in.";
            default -> "Email error with code: " + errorCode.name();
        };
    }
}
