package com.yohan.event_planner.domain;

import jakarta.persistence.*;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * Entity representing a scheduled event created by a user.
 *
 * <p>This entity supports core event functionality, including event creation,
 * start and end times, timezone information, and optional descriptions. It also
 * tracks the user who created the event.</p>
 *
 * <h2>Timezone Handling</h2>
 * <ul>
 *     <li>Start and end times are stored internally in UTC.</li>
 *     <li>Original time zone IDs are stored separately to support display in the user's local time zone.</li>
 * </ul>
 *
 * <p>All input validation and business logic should be handled at the service or DTO layer.</p>
 */
@Entity
@Table(name = "events")
@Access(AccessType.FIELD)
public class Event {

    /** Unique identifier for the event. Auto-generated by the database. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Event name or title. */
    @Column(nullable = false, length = 50)
    private String name;

    /** The user who created the event. */
    @ManyToOne
    @JoinColumn(name = "creator_id", nullable = false)
    private final User creator;

    /** The start time of the event, stored in UTC. */
    @Column(name = "starttime", nullable = false)  // Updated to match database column
    private ZonedDateTime startTime;

    /** The end time of the event, stored in UTC. */
    @Column(name = "endtime", nullable = false)  // Updated to match database column
    private ZonedDateTime endTime;

    /** Time zone ID used for the original start time. */
    @Column(name = "starttimezone", nullable = false, length = 50)  // Updated to match database column
    private String startTimezone;

    /** Time zone ID used for the original end time. */
    @Column(name = "endtimezone", nullable = false, length = 50)  // Updated to match database column
    private String endTimezone;

    /** Optional description of the event. */
    @Column(length = 255)
    private String description;

    /**
     * Protected no-args constructor required by JPA.
     * Not intended for direct use.
     */
    protected Event() {
        this.creator = null;
    }

    /**
     * Constructs a new event with the required core fields.
     * <p>
     * The given start and end times are expected to include time zone information.
     * Internally, they are converted to UTC and their original time zone IDs are preserved.
     * This conversion is performed via setter methods to ensure consistency.
     *
     * @param name      the name of the event
     * @param startTime the local start time including zone (converted and stored in UTC)
     * @param endTime   the local end time including zone (converted and stored in UTC)
     * @param creator   the user creating the event
     */
    public Event(String name, ZonedDateTime startTime, ZonedDateTime endTime, User creator) {
        this.name = name;
        this.creator = creator;
        setStartTime(startTime);
        setEndTime(endTime);
    }

    // --- Getters ---

    /**
     * Returns the unique identifier of the event.
     *
     * @return the event ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Returns the name of the event.
     *
     * @return the event name
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the user who created the event.
     *
     * @return the event creator
     */
    public User getCreator() {
        return creator;
    }

    /**
     * Returns the start time of the event in UTC.
     *
     * @return the UTC start time
     */
    public ZonedDateTime getStartTime() {
        return startTime;
    }

    /**
     * Returns the end time of the event in UTC.
     *
     * @return the UTC end time
     */
    public ZonedDateTime getEndTime() {
        return endTime;
    }

    /**
     * Returns the original time zone ID for the start time.
     *
     * @return the start time zone ID
     */
    public String getStartTimezone() {
        return startTimezone;
    }

    /**
     * Returns the original time zone ID for the end time.
     *
     * @return the end time zone ID
     */
    public String getEndTimezone() {
        return endTimezone;
    }

    /**
     * Returns the optional event description.
     *
     * @return the event description, or {@code null} if not provided
     */
    public String getDescription() {
        return description;
    }

    // --- Setters ---

    /**
     * Sets the name of the event.
     *
     * @param name the new event name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the start time and updates the stored UTC time and time zone ID.
     *
     * @param startTime the new start time including zone
     */
    public void setStartTime(ZonedDateTime startTime) {
        this.startTimezone = startTime.getZone().getId();
        this.startTime = startTime.withZoneSameInstant(ZoneOffset.UTC);
    }

    /**
     * Sets the end time and updates the stored UTC time and time zone ID.
     *
     * @param endTime the new end time including zone
     */
    public void setEndTime(ZonedDateTime endTime) {
        this.endTimezone = endTime.getZone().getId();
        this.endTime = endTime.withZoneSameInstant(ZoneOffset.UTC);
    }

    /**
     * Sets the optional description of the event.
     *
     * @param description the new event description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    // --- Equality & Hashing ---

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Event event)) return false;
        if (id != null && event.id != null) {
            return id.equals(event.id);
        }
        return Objects.equals(name, event.name)
                && Objects.equals(startTime, event.startTime)
                && Objects.equals(endTime, event.endTime)
                && Objects.equals(creator, event.creator)
                && Objects.equals(startTimezone, event.startTimezone)
                && Objects.equals(endTimezone, event.endTimezone);
    }

    @Override
    public int hashCode() {
        return (id != null) ? id.hashCode()
                : Objects.hash(name, startTime, endTime, creator, startTimezone, endTimezone);
    }
}
